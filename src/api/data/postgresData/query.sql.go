// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrl = `-- name: CreateUrl :one
INSERT into urls(originalurl, hash, created_at, owner) VALUES($1, $2, $3, $4) RETURNING id, originalurl, hash, created_at, owner
`

type CreateUrlParams struct {
	Originalurl string
	Hash        string
	CreatedAt   pgtype.Int8
	Owner       pgtype.Int8
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.Originalurl,
		arg.Hash,
		arg.CreatedAt,
		arg.Owner,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Originalurl,
		&i.Hash,
		&i.CreatedAt,
		&i.Owner,
	)
	return i, err
}

const getUrlByHash = `-- name: GetUrlByHash :one
SELECT id, originalurl, hash, created_at, owner FROM urls
WHERE hash = $1 LIMIT 1
`

func (q *Queries) GetUrlByHash(ctx context.Context, hash string) (Url, error) {
	row := q.db.QueryRow(ctx, getUrlByHash, hash)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Originalurl,
		&i.Hash,
		&i.CreatedAt,
		&i.Owner,
	)
	return i, err
}

const getUrlByID = `-- name: GetUrlByID :one
SELECT id, originalurl, hash, created_at, owner FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrlByID(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRow(ctx, getUrlByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Originalurl,
		&i.Hash,
		&i.CreatedAt,
		&i.Owner,
	)
	return i, err
}
